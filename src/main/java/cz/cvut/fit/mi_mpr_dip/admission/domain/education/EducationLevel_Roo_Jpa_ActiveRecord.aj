// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain.education;

import cz.cvut.fit.mi_mpr_dip.admission.domain.education.EducationLevel;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EducationLevel_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager EducationLevel.entityManager;
    
    public static final EntityManager EducationLevel.entityManager() {
        EntityManager em = new EducationLevel().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EducationLevel.countEducationLevels() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EducationLevel o", Long.class).getSingleResult();
    }
    
    public static List<EducationLevel> EducationLevel.findAllEducationLevels() {
        return entityManager().createQuery("SELECT o FROM EducationLevel o", EducationLevel.class).getResultList();
    }
    
    public static EducationLevel EducationLevel.findEducationLevel(Long educationLevelId) {
        if (educationLevelId == null) return null;
        return entityManager().find(EducationLevel.class, educationLevelId);
    }
    
    public static List<EducationLevel> EducationLevel.findEducationLevelEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EducationLevel o", EducationLevel.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EducationLevel.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EducationLevel.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EducationLevel attached = EducationLevel.findEducationLevel(this.educationLevelId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EducationLevel.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EducationLevel.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EducationLevel EducationLevel.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EducationLevel merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
