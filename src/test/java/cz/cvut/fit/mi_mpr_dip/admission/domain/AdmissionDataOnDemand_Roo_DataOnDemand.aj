// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.cvut.fit.mi_mpr_dip.admission.domain;

import cz.cvut.fit.mi_mpr_dip.admission.domain.Admission;
import cz.cvut.fit.mi_mpr_dip.admission.domain.AdmissionDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.personal.Person;
import cz.cvut.fit.mi_mpr_dip.admission.domain.personal.PersonDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.study.Degree;
import cz.cvut.fit.mi_mpr_dip.admission.domain.study.DegreeDataOnDemand;
import cz.cvut.fit.mi_mpr_dip.admission.domain.study.Faculty;
import cz.cvut.fit.mi_mpr_dip.admission.domain.study.Programme;
import cz.cvut.fit.mi_mpr_dip.admission.domain.study.StudyMode;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdmissionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdmissionDataOnDemand: @Component;
    
    private Random AdmissionDataOnDemand.rnd = new SecureRandom();
    
    private List<Admission> AdmissionDataOnDemand.data;
    
    @Autowired
    private DegreeDataOnDemand AdmissionDataOnDemand.degreeDataOnDemand;
    
    @Autowired
    private PersonDataOnDemand AdmissionDataOnDemand.personDataOnDemand;
    
    public Admission AdmissionDataOnDemand.getNewTransientAdmission(int index) {
        Admission obj = new Admission();
        setCode(obj, index);
        setDegree(obj, index);
        setFaculty(obj, index);
        setPerson(obj, index);
        setProgramme(obj, index);
        setStudyMode(obj, index);
        return obj;
    }
    
    public void AdmissionDataOnDemand.setCode(Admission obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void AdmissionDataOnDemand.setDegree(Admission obj, int index) {
        Degree degree = degreeDataOnDemand.getRandomDegree();
        obj.setDegree(degree);
    }
    
    public void AdmissionDataOnDemand.setFaculty(Admission obj, int index) {
        Faculty faculty = null;
        obj.setFaculty(faculty);
    }
    
    public void AdmissionDataOnDemand.setPerson(Admission obj, int index) {
        Person person = personDataOnDemand.getSpecificPerson(index);
        obj.setPerson(person);
    }
    
    public void AdmissionDataOnDemand.setProgramme(Admission obj, int index) {
        Programme programme = null;
        obj.setProgramme(programme);
    }
    
    public void AdmissionDataOnDemand.setStudyMode(Admission obj, int index) {
        StudyMode studyMode = null;
        obj.setStudyMode(studyMode);
    }
    
    public Admission AdmissionDataOnDemand.getSpecificAdmission(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Admission obj = data.get(index);
        Long id = obj.getAdmissionId();
        return Admission.findAdmission(id);
    }
    
    public Admission AdmissionDataOnDemand.getRandomAdmission() {
        init();
        Admission obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getAdmissionId();
        return Admission.findAdmission(id);
    }
    
    public boolean AdmissionDataOnDemand.modifyAdmission(Admission obj) {
        return false;
    }
    
    public void AdmissionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Admission.findAdmissionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Admission' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Admission>();
        for (int i = 0; i < 10; i++) {
            Admission obj = getNewTransientAdmission(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
